## (AP) A Bit of History {.smaller visibility="uncounted"}

:::: {.columns}
::: {.column style="width: 50%;"}
[**Abacus**](https://en.wikipedia.org/wiki/Abacus) (~between 2700 and 2300 BCE) (Sumerians) [@ifrah2001]

[**Pascalina**](https://en.wikipedia.org/wiki/Pascaline) (1642) (Blaise Pascal (1623â€“1662)) [@ifrah2001]

[**Babbageâ€™s Difference Engine**](https://en.wikipedia.org/wiki/Difference_engine) (Charles Babbage (1792â€“1871))
:::
::: {.column style="width: 50%;"}
![](images/richards-1950-chinese-abacus.jpg){fig-align="center" style="width: 80%; padding-top: 100px;"}
:::
::::

::: footer
(Photo by [Mark Richards](https://www.computerhistory.org/revolution/calculators/1/1/134?position=0))
:::

::: {.notes}
:::

## (AP) A Bit of History {.smaller visibility="uncounted"}

:::: {.columns}
::: {.column style="width: 50%;"}
**Keep in mind**

- 1st World War (1914â€“1918)
- 2nd World War (1939â€“1945)

[**Universal Turing machine**](https://en.wikipedia.org/wiki/Universal_Turing_machine) (Alan Turing) [@turing1937]

[**"von Neumann Architecture"**](https://en.wikipedia.org/wiki/Von_Neumann_architecture) (1945) [@vonneumann1993a]

[**ENIAC**](https://en.wikipedia.org/wiki/ENIAC) (1945)
:::
::: {.column style="width: 50%;"}
![](images/science-history-images-eniac-figure-1.jpg){fig-align="center" style="width: 80%; padding-top: 50px;"}
:::
::::

::: footer
(Photo by [Science History Images/Alamy Stock Photo](https://www.alamy.com/technicians-connecting-wires-of-eniac-image386295734.html))
:::

::: {.notes}
- [Enigma machine](https://en.wikipedia.org/wiki/Enigma_machine)
:::

## (AP) Low and High-Level Prog. Lang. {.smaller visibility="uncounted"}

::: {.notes}
:::

## (AP) Programming Paradigms {.smaller visibility="uncounted"}

A [programming paradigm](https://en.m.wikipedia.org/wiki/Programming_paradigm) is a specific approach to the programming process [@brookshear2020].

R is a multi-paradigm programming language, but is mainly **functional**.

:::: {.columns style="padding-top: 10px;"}
::: {.column style="width: 33%;"}
[Procedural](https://en.m.wikipedia.org/wiki/Procedural_programming) (Imperative)

```{r}
x <- seq(1, 10)
y <- numeric()
z <- 0

for (i in x) {
  y <- c(y, i + 1)
}

for (i in y) {
  z <- z + i
}

z / length(x)
```
:::
::: {.column style="width: 33%;"}
[Functional](https://en.m.wikipedia.org/wiki/Functional_programming) (Declarative)

```{r}
seq(1, 10) |>
  vapply(\(x) x + 1, numeric(1)) |>
  mean()
```
:::
::: {.column style="width: 34%;"}
- [Object-Oriented](https://en.m.wikipedia.org/wiki/Object-oriented_programming) (Imperative)

```{r}
library(S7)

dog <- new_class("dog", properties = list(
  name = class_character,
  age = class_numeric
))

lola <- dog(name = "Lola", age = 11)
speak <- new_generic("speak", "x")
method(speak, dog) <- function(x) "Woof"
speak(lola)
```
:::
::::

::: {.notes}
:::

## (AP) Warning For Your Future Self {.smaller visibility="uncounted"}

:::: {.columns}
::: {.column style="width: 50%;"}
ðŸš¨ **Never use `setwd()`!** ðŸš¨

(How to detect a beginner R user)

Always work inside a project directory. Your Working Directory (WD) should always be the root of your project.

If you need a better way to manage your WD, see the [`here`](https://here.r-lib.org/) package.

Click [here](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/#:~:text=such%20as%20these.-,What%E2%80%99s%20wrong%20with,setwd(),-%3F) to learn why.
:::
::: {.column style="width: 50%;"}
![](images/allison-horst-figure-26.png){fig-align="center" style="width: 100%; padding-top: 125px;"}
:::
::::

::: {.notes}
:::

## (AP) Debugging {.smaller visibility="uncounted"}

![](images/allison-horst-figure-35.png){fig-align="center" style="width: 90%; padding-top: 0px;"}

::: footer
(Artwork by [Allison Horst](https://twitter.com/allison_horst))
:::

::: {.notes}
:::

## (AP) Data Engineering {.smaller .nostretch visibility="uncounted"}

::: {style="font-size: 0.75em"}
> Data engineering is the development, implementation, and maintenance of systems and processes that take in raw data and produce high-quality, consistent information that supports downstream use cases, such as analysis and machine learning [@reis2022].
:::

![](images/reis-2022-figure-1-1.png){fig-align="center" style="width: 65%; padding-top: 0px;"}

::: footer
(Reproduced from @reis2022)
:::

::: {.notes}
- Two main activities related to R.
- You can think of data engineering as the **plumbing** of data science.
:::

## (AP) Data Eng. *versus* Data Science {.smaller .nostretch visibility="uncounted"}

::: {style="padding-top: 25px;"}
> Data scientists, according to interviews and expert estimates, spend **from 50 percent to 80 percent of their time mired in this more mundane labor of collecting and preparing unruly digital data**, before it can be explored for useful nuggets [@lohr2014].
:::

![](images/reis-2022-figure-1-6.png){fig-align="center" style="width: 90%; padding-top:50px;"}

::: footer
(Figure reproduced from @reis2022)
:::

::: {.notes}
:::

## (AP) The Tidy Data Manifesto {.smaller visibility="uncounted"}

::: footer
[@wickham2014]
:::

::: {.notes}
:::

## (AP) Tidy Data {.smaller .nostretch visibility="uncounted"}

![](images/allison-horst-figure-14.jpg){fig-align="center" style="width: 100%;"}

::: footer
(Artwork by [Allison Horst](https://allisonhorst.com/horst-hill-collaborations))
:::

::: {.notes}
:::

## (AP) Tidy Data {.smaller .nostretch visibility="uncounted"}

![](images/allison-horst-figure-19.jpg){fig-align="center" style="width: 80%; padding-top: 50px;"}

::: footer
(Artwork by [Allison Horst](https://allisonhorst.com/horst-hill-collaborations))
:::

## (AP) Big Data {.smaller visibility="uncounted"}

:::: {.columns}
::: {.column style="width: 40%;"}
> **Big data will be dead in 5 Years**: Everything will be big data, so it won't need a special name. [@gavin2020]
:::
::: {.column style="width: 60%;"}
![](images/david-fletcher-big-data.jpeg){fig-align="center" style="width: 100%;"}
:::
::::

::: footer
(Artwork by [David Fletcher](https://en.wikipedia.org/wiki/David_Fletcher_(cartoonist)))
:::

::: {.notes}
:::

## (AP) Big Data Wrangling {.smaller visibility="uncounted"}

**Working with big data using Excel or GUI-based (Graphical User Interface) statistical software is extremely challenging, if not impossible**.

Excel, for example, can struggle with performance issues and has a maximum row limit (1,048,576 rows), which is often insufficient for big data projects.

The best tools for handling big data are [R](https://www.r-project.org/) and [Python](https://www.python.org/).

::: {.notes}
:::

## (AP) Fair Principles {.smaller .nostretch visibility="uncounted"}

![](images/fair-data-principles.png){fig-align="center" style="width: 75%; padding-top: 75px;"}

::: footer
(To learn more see: @wilkinson2016 and @gofairinitiative)
:::

::: {.notes}
:::

## (AP) Data Management Plans {.smaller visibility="uncounted"}

A data management plan (DMP) is a formal document that outlines how data will be managed throughout the research process.

- [FAPESP](https://fapesp.br/gestaodedados)
- [DMPTool](https://dmptool.org/)
- [DMPonline](https://dmponline.dcc.ac.uk/)

::: {}
**Example**: [Associations between the duration and quality of sleep of pregnant women in the third trimester with the duration of labor](https://doi.org/10.48321/D1PS4M)
:::

::: {.notes}
:::

## (AP) Strings {.smaller visibility="uncounted"}

::: {.notes}
:::

## (AP) Regular Expressions {.smaller visibility="uncounted"}

::: {.notes}
:::

## (AP) Lookup Tables {.smaller visibility="uncounted"}

::: {.notes}
:::

## (AP) Joins {.smaller visibility="uncounted"}

::: {.notes}
:::

## (AP) The `visdat` Package {.smaller visibility="uncounted"}

:::: {.columns}
::: {.column style="width: 15%;"}
[![](images/visdat-hex-logo.svg){style="width: 120px;"}](https://docs.ropensci.org/visdat/)
:::
::: {.column style="width: 85%; padding-top: 15px;"}
`visdat` helps you diagnose missing values and other potential problems in your data.

```r
install.packages("visdat")
```
:::
::::

```{r}
#| eval: false

library(palmerpenguins)
library(visdat)

penguins |> vis_dat()
```

::: {.notes}
:::

## (AP) What Test Should I Use? {.smaller visibility="uncounted"}

::: {style="padding-top: 50px;"}
```{r}
#| echo: false

dplyr::tibble(
  type_of_data = c(
    "Normally distributed continuous data<br>(summarized as mean)",
    paste0(
      "Ranks, scores, and non-normally<br>distributed continuous data<br>",
      "(Summarized as median)"
    ),
    "Dichotomous data<br>(Summarized as proportion)"
  ),
  two_data_sets_paired = c(
    "Paired t-test",
    "Wilcoxon signed-rank test",
    "Mc Nemar's test"
  ),
  two_data_sets_unpaired = c(
    "Unpaired t-test",
    "Mann-Whitney U test",
    "Fishers test or Chi-square test"
  ),
  more_than_two_data_sets_paired = c(
    "Repeated measures ANOVA",
    "Friedman's test",
    "Cochrane Q test"
  ),
  more_than_two_data_sets_unpaired = c(
    "One-way ANOVA",
    "Kruskal-Wallis test",
    "Chi-square test"
  ),
  correlation_analysis = c(
    "Pearson's correlation",
    "Spearman's rank correlation",
    "Contingency coefficient"
  ),
  regression_analysis = c(
    "Linear regression",
    "Nonparametric regression",
    "Logistic regression"
  )
) |>
  gt::gt() |>
  gt::tab_spanner(
    label = "Comparison Analysis",
    columns = c(
      two_data_sets_paired, two_data_sets_unpaired,
      more_than_two_data_sets_paired, more_than_two_data_sets_unpaired
    )
  ) |>
  gt::tab_spanner(
    label = "Other Analysis",
    columns = c(correlation_analysis, regression_analysis)
  ) |>
  gt::cols_label(
    type_of_data = "Type of Data",
    two_data_sets_paired = "2 Data Sets - Paired",
    two_data_sets_unpaired = "2 Data Sets - Unpaired",
    more_than_two_data_sets_paired = "More than 2 Data Sets - Paired",
    more_than_two_data_sets_unpaired = "More than 2 Data Sets - Unpaired",
    correlation_analysis = "Correlation Analysis",
    regression_analysis = "Regression Analysis"
  ) |>
  gt::fmt_markdown(columns = type_of_data) |>
  gt::tab_style(
    style = gt::cell_text(weight = "bold"),
    locations = gt::cells_column_labels()
  )
```
:::

::: footer
(Adapted from @najmi2021)
:::

::: {.notes}
:::

## (AP) ANOVA: Power Analysis {.smaller visibility="uncounted"}

```{r}
library(pwrss)
```

```{r}
pwrss.f.ancova(
  eta2 = 0.01,
  n.way = 1,
  n.levels = 3,
  n.covariates = 0,
  alpha = 0.05,
  n = NULL,
  power = 0.8
)
```

::: {.notes}
:::

## (AP) ANOVA: Power Analysis {.smaller visibility="uncounted"}

```{r}
#| eval: false
#| warning: false

library(pwrss)

power.f.test(
  ncp = pwr_analysis$ncp,
  df1 = pwr_analysis$df1,
  df2 = pwr_analysis$df2,
  alpha = 0.05,
  plot = TRUE
)
```

::: {.notes}
:::

## (AP) Dig. Objects & Ver. Control {.smaller visibility="uncounted"}

:::: {.columns}
::: {.column style="width: 47%;"}
![](images/doi-foundation-logo.svg){fig-align="center" style="width: 100%; padding-top: 75px;"}
:::
::: {.column style="width: 6%;"}
:::
::: {.column style="width: 47%;"}
![](images/version-control.png){fig-align="center" style="width: 60%; padding-top: 60px;"}
:::
::::

::: {.notes}
:::

## (AP) Open Licenses {.smaller visibility="uncounted"}

A unlicensed work is an "all rights reserved" work. This means that you can't use it without the author's permission.

:::: {.columns}
::: {.column style="width: 50%; font-size: 0.85em;"}
* Licences for data
  * [Open Knowledge Foundation](https://okfn.org/)

* Licences for software/code
  * [OSI Approved Licenses](https://opensource.org/licenses)
  * [The MIT licence](https://opensource.org/license/mit)
  * [GNU General Public License version 3](https://opensource.org/license/gpl-3-0)

* Licences for _everything else_ (e.g., documents, figures)
  * [Creative Commons](https://creativecommons.org/)
  * [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/)
:::
::: {.column style="width: 50%;"}
![](images/mit-license-logo.png){fig-align="center" style="width: 50%;"}

![](images/cc-license-logo.png){fig-align="center" style="width: 50%;"}
:::
::::

## (AP) Dynamic Documents {.smaller visibility="uncounted"}

Dynamic documents seamlessly integrate text with output from a programming language, automatically updating the output whenever the code is executed.

::::: {.columns}
:::: {.column style="width: 50%; font-size: 0.9em; padding-top: 0px;"}
- [Quarto](https://quarto.org/) (R, Python, Julia) (+Pandoc)
- [Jupyter](https://jupyter.org/) (Python, R, Julia, +37 languages)
- [Rmarkdown](https://rmarkdown.rstudio.com/) (R) (+Pandoc)

::: {style="padding-top: 10px;"}
**Examples**

- External-link: [Central limit theorem](https://danielvartan.github.io/central-limit-theorem/)
- External-link: [Sample size](https://danielvartan.github.io/sample-size/)
- External-link: [Fisher's hypothesis](https://danielvartan.github.io/fisher-hypothesis/)
:::
::::
:::: {.column style="width: 50%; padding-top: 25px;"}
![](images/quarto-logo.png){fig-align="center" style="width: 75%;"}

![](images/jupyter-logo.png){fig-align="center" style="width: 40%;"}
::::
:::::

::: {.notes}
- You can write articles with dynamic documents.
- Difference from LaTeX.
- Quarto as an evolution from Rmarkdown.
- Jupyter can be used with Quarto.
:::

## (AP) Pipelines {.smaller .nostretch visibility="uncounted"}

Pipeline tools coordinate the pieces of computationally demanding analysis projects. They can be used to automate the execution of a series of tasks.

:::: {.columns}
::: {.column style="width: 25%;"}
[![](images/targets-logo.png){fig-align="center" style="width: 75%; padding-top: 70px;"}](https://github.com/ropensci/targets)
:::
::: {.column style="width: 75%;"}
[![](images/targets-pipeline.png){fig-align="center" style="width: 70%; padding-top: 0px;"}](https://books.ropensci.org/targets/walkthrough.html#inspect-the-pipeline)
:::
::::

::: footer
(Reproduced from @landau)
:::

::: {.notes}
:::

## (AP) Reproducible Env. {.smaller visibility="uncounted"}

Reproducible environments ensure that your code will run the same way on different machines and regardless of the time.

:::: {.columns}
::: {.column style="width: 50%;"}
[![](images/renv-hex-logo.png){fig-align="center" style="width: 75%; padding-top: 25px;"}](https://rstudio.github.io/renv/)
:::
::: {.column style="width: 50%;"}
[![](images/podman-hex-logo.png){fig-align="center" style="width: 75%; padding-top: 25px;"}](https://podman.io/)
:::
::::

::: {.notes}
:::

## (AP) App. Prog. Interf. (APIs) {.smaller visibility="uncounted"}

::: {style="font-size: 0.8em;"}
APIs are a set of rules that allow different software applications to communicate with each other.
:::

:::: {.columns}
::: {.column style="width: 33%; font-size: 0.7em;"}
* [OSF API](https://developer.osf.io/)
* [Brazil's Central Bank APIs](https://dadosabertos.bcb.gov.br/dataset?res_format=API)
* [NASA's APIs](https://api.nasa.gov/)
:::
::: {.column style="width: 34%; font-size: 0.7em;"}
* [OpenAI API](https://platform.openai.com/docs/api-reference/introduction)
* [SIDRA API (IBGE)](https://api.sidra.ibge.gov.br/)
* [SISVAN API](https://opendatasus.saude.gov.br/dataset/sisvan-estado-nutricional/resource/3ead4331-6424-471f-a811-4edf22f58e00)
:::
::: {.column style="width: 33%; font-size: 0.7em;"}
![](images/api-symbol.png){fig-align="center" style="width: 40%;"}
:::
::::

```{r}
library(magrittr)
library(sidrar)
```

```{r}
#| eval: false

# Brazil's population in 2022 (Census data)
get_sidra(
  api = "/t/7358/n1/all/v/all/p/all/c2/6794/c287/100362/c1933/49039"
) |>
  suppressMessages() |>
  extract2("Valor") |>
  prettyNum(big.mark = ",")
#> [1] "216,284,269"
```

## (AP) KISS Principle {.nostretch visibility="uncounted"}

![](images/kiss-principle.png){fig-align="center" style="width: 75%; padding-top: 50px;"}

## (AP) Some Other Things {.smaller visibility="uncounted"}

We've only touched upon the vast landscape of open science. There are many other tools and concepts that we didn't cover, such as:

::: {.columns style="padding-top: 10px;"}
::: {.column style="width: 50%; font-size: 0.75em;"}
- Markup languages (e.g., [Markdown](https://daringfireball.net/projects/markdown/), [LaTeX](https://www.latex-project.org/))
- Open source softwares (e.g., [rOpenSci](https://ropensci.org/), [CRAN](https://cran.r-project.org/), [Bioconductor](https://www.bioconductor.org/), [PyPI](https://pypi))
- Version control systems (e.g. [Git](https://www.git-scm.com/), [SVN](https://subversion.apache.org/), [Semantic versioning](https://semver.org/))
- Database systems (e.g., [Relational databases](https://en.wikipedia.org/wiki/Relational_database), [NoSQL](https://en.wikipedia.org/wiki/NoSQL))
- Open source data management systems (e.g., [CKAN](https://www.ckan.org/) [Dataverse](https://dataverse.org/); [DSpace](https://dspace.lyrasis.org/))
:::
::: {.column style="width: 50%; font-size: 0.75em;"}
- Git-based repositories (e.g., [GitHub](https://github.com), [GitLab](https://gitlab.com))
- Open data formats (e.g., [CSV](https://en.wikipedia.org/wiki/Comma-separated_values), [JSON](https://www.json.org/json-en.html), [Apache Parquet](https://en.wikipedia.org/wiki/Apache_Parquet))
- Cloud computing (e.g., [AWS](https://aws.amazon.com/), [Google Cloud](https://cloud.google.com/), [Azure](https://azure.microsoft.com/))
- Open science policies (e.g., [FAPESP](https://fapesp.br/openscience/), [European Commission](https://research-and-innovation.ec.europa.eu/strategy/strategy-2020-2024/our-digital-future/open-science_en))
- Ethical data sharing practices (See @meyer2018 to learn more)
:::
:::

::: {.notes}
:::

## (AP) Some Other Things {.smaller .nostretch visibility="uncounted"}

![](images/allison-horst-figure-9.png){fig-align="center" style="width: 90%; padding-top: 10px;"}

::: footer
(Artwork by [Allison Horst](https://allisonhorst.com/horst-hill-collaborations))
:::

::: {.notes}
:::
