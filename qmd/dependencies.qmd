# Dependências

## Introdução

Este notebook foi desenvolvido para auxiliar os servidores da Superintendência de Tecnologia da Informação (STI) da Faculdade de Saúde Pública ([FSP](https://www.fsp.usp.br/)) da Universidade de São Paulo ([USP](https://www5.usp.br/)) na instalação e teste dos softwares necessários para o curso **Introdução à Linguagem de Programação R**.

O repositório do curso no GitHub está disponível [neste link](https://github.com/danielvartan/r-course), e os slides das aulas podem ser acessados [aqui](https://danielvartan.github.io/r-course/).

Agradecemos à equipe da STI pelo suporte e colaboração.

## Como Usar

Siga os passos abaixo para instalar e testar os softwares necessários para o curso:

1. Instale todas as dependências listadas abaixo.
2. Abra este notebook no RStudio.
3. Execute, em ordem, os blocos de código da seção *Pacotes/Importações* para instalar os pacotes necessários.
4. Execute, em ordem, os blocos de código da seção *Teste* para verificar se tudo está funcionando corretamente.

Se ocorrer algum problema durante os testes, confira se todos os pacotes foram instalados corretamente.

Os instrutores do curso estão disponíveis para ajudar a qualquer momento via e-mail ou WhatsApp.

## Dependências

O curso se baseia em três ferramentas: A linguagem de programação [R](https://cran.r-project.org/); o ambiente de desenvolvimento integrado (IDE) [RStudio](https://posit.co/download/rstudio-desktop/); e o sistema de notebooks computacionais [Quarto](https://quarto.org/docs/get-started/). Abaixo estão as versões mínimas necessárias para cada uma dessas ferramentas.

- R >= 4.4 (Última versão: 4.4.3)
- RStudio >= 2024.12 (Última versão: 2024.12.1)
- Quarto >= 1.6.39 (Última versão: 1.6.42)

## Pacotes/Importações

### Tidyverse

```{r}
install.packages(
  c(
    "dplyr", "forcats", "fs", "ggplot2", "googledrive", "googlesheets4",
    "haven", "hms", "lubridate", "magrittr", "purrr", "stringr", "tibble",
    "tidyr", "readr", "readxl"
  ),
  dependencies = TRUE
)
```

Instale também o meta-pacote, por via das dúvidas (o metapacote não contém todos os pacotes da coleção):

```{r}
install.packages("tidyverse", dependencies = TRUE)
```

### Tidymodels

```{r}
install.packages(
  c(
    "broom", "corrr", "infer", "parsnip", "recipes", "rsample", "textrecipes",
    "tidyposterior", "workflows", "yardstick"
  ),
  dependencies = TRUE
)
```

Instale também o meta-pacote, por via das dúvidas (o metapacote não contém todos os pacotes da coleção):

```{r}
install.packages("tidymodels", dependencies = TRUE)
```

### R Infrastructure (R-Lib)

```{r}
install.packages(
  c("cli", "here", "httr", "ragg", "remotes", "rlang", "usethis"),
  dependencies = TRUE
)
```

### Outros

```{r}
install.packages(
  c(
    "car", "checkmate", "clipr", "curl", "DT", "effectsize", "fBasics",
    "geobr", "GGally", "ggplotify", "gt", "janitor", "jsonlite", "knitr",
    "latex2exp", "mctq", "microbenchmark", "moments", "multcomp", "nortest",
    "olsrr", "osfr", "palmerpenguins", "pander", "patchwork", "performance",
    "psychometric", "pwr", "pwrss", "raster", "RColorBrewer", "report",
    "rmarkdown", "rstudioapi", "sf", "sidrar", "skedastic", "summarytools",
    "summarytools", "terra", "tictoc", "viridis", "xml2", "yaml"
  ),
  dependencies = TRUE
)
```

### GitHub

Para instalar pacotes remotos, é preciso instalar o pacote `remotes`:

```{r}
install.packages("remotes", dependencies = TRUE)
```

```{r}
remotes::install_github(
  c(
    "danielvartan/brandr", "danielvartan/groomr", "danielvartan/iramuteqlike",
    "danielvartan/lockr", "danielvartan/orbis", "danielvartan/plotr",
    "danielvartan/prettycheck", "danielvartan/quartor", "danielvartan/rutils"
  ),
  dependencies = TRUE,
  upgrade = "always"
)
```

## Testes

Execute os blocos de código abaixo, na ordem indicada, para verificar se todos os pacotes foram instalados corretamente.

No RStudio, você pode executar todos os blocos de código de uma vez acessando *Run > Run All Chunks Below*.

### Gráficos

```{r}
library(brandr)
library(ggplot2)
library(palmerpenguins)

penguins |>
  ggplot(aes(x = island, fill = species)) +
  geom_bar(alpha = 0.8) +
  theme_minimal() +
  facet_wrap(~species, ncol = 1) +
  coord_flip() +
  labs(
    x = "Island",
    y = "Count"
  ) +
  brandr::scale_fill_brand_d() +
  theme(legend.position = "none")
```

```{r}
library(brandr)
library(ggplot2)
library(palmerpenguins)
library(tidyr)

penguins |>
  drop_na(flipper_length_mm, species) |>
  ggplot(aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
  labs(x = "Flipper Length (mm)", y = "Frequency", fill = "Species") +
  brandr::scale_fill_brand_d()
```

```{r}
library(brandr)
library(ggplot2)
library(palmerpenguins)
library(tidyr)

penguins |>
  drop_na(bill_length_mm, species) |>
  ggplot(aes(x = species, y = bill_length_mm, fill = species)) +
  geom_boxplot(outlier.color = brandr::get_brand_color("dark-red")) +
  geom_jitter(width = 0.2, alpha = 0.1) +
  brandr::scale_fill_brand_d(alpha = 0.7) +
  labs(x = "Species", y = "Bill Length (mm)", fill = "Species")
```

```{r}
library(brandr)
library(ggplot2)
library(palmerpenguins)
library(tidyr)

penguins |>
  drop_na(flipper_length_mm, body_mass_g, species) |>
  ggplot(
    aes(
      x = flipper_length_mm,
      y = body_mass_g,
      color = species,
      shape = species
    )
  ) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +
  labs(
    x = "Flipper Length (mm)",
    y = "Body Mass (g)",
    color = "Species",
    shape = "Species"
  ) +
  brandr::scale_color_brand_d(alpha = 0.7)
```

```{r}
library(brandr)
library(dplyr)
library(ggplot2)
library(palmerpenguins)
library(tidyr)

penguins |>
  drop_na(flipper_length_mm, body_mass_g, sex) |>
  mutate(sex = `levels<-`(sex, stringr::str_to_title(levels(sex)))) |>
  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = sex)) +
  geom_point(size = 2) +
  geom_smooth(
    method = "lm",
    formula = y ~ x,
    se = FALSE,
    color = brandr::get_brand_color("brown")
  ) +
  labs(
    x = "Flipper Length (mm)",
    y = "Body Mass (g)",
    color = "Sex"
  ) +
  brandr::scale_color_brand_d(alpha = 0.7) +
  facet_wrap(~species)
```

```{r}
library(brandr)
library(ggplot2)
library(palmerpenguins)
library(patchwork)
library(tidyr)

plot_hist <-
  penguins |>
  drop_na(flipper_length_mm, species) |>
  ggplot(aes(x = flipper_length_mm, fill = species)) +
  geom_histogram(bins = 30, alpha = 0.5, position = "identity") +
  labs(x = "Flipper Length (mm)", y = "Frequency") +
  brandr::scale_fill_brand_d() +
  theme(legend.position = "none")

plot_boxplot <-
  penguins |>
  drop_na(bill_length_mm, species) |>
  ggplot(aes(x = species, y = bill_length_mm, fill = species)) +
  geom_boxplot(outlier.color = brandr::get_brand_color("dark-red")) +
  geom_jitter(width = 0.2, alpha = 0.1) +
  labs(x = "Species", y = "Bill Length (mm)", fill = "Species") +
  brandr::scale_fill_brand_d(alpha = 0.7) +
  theme(axis.title.x = element_blank(), legend.position = "none")

plot_scatter <-
  penguins |>
  drop_na(flipper_length_mm, body_mass_g, species) |>
  ggplot(
    aes(
      x = flipper_length_mm,
      y = body_mass_g,
      color = species,
      shape = species
    )
  ) +
  geom_point(size = 2) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +
  labs(
    x = "Flipper Length (mm)",
    y = "Body Mass (g)",
    color = "Species",
    shape = "Species"
  ) +
  brandr::scale_color_brand_d(alpha = 0.7) +
  theme(legend.position = "none")

(plot_hist + plot_boxplot) / plot_scatter + plot_annotation(tag_levels = "A")
```

```{r}
library(brandr)
library(dplyr)
library(GGally)
library(ggplot2)
library(palmerpenguins)

penguins |>
  select(species, body_mass_g, ends_with("_mm")) |>
  GGally::ggpairs(aes(color = species)) +
  brandr::scale_color_brand_d(alpha = 0.7) +
  brandr::scale_fill_brand_d(alpha = 0.7)
```

### Modelos

```{r}
library(dplyr)
library(effectsize)
library(infer)
library(palmerpenguins)
library(pwrss)
library(stats)
library(tidyr)
```

```{r}
observed_statistic <-
  penguins |>
  dplyr::filter(species %in% c("Adelie", "Gentoo")) |>
  tidyr::drop_na(flipper_length_mm, species) |>
  specify(flipper_length_mm ~ species) |>
  hypothesize(null = "independence") |>
  calculate("t", order = c("Adelie", "Gentoo"))

observed_statistic
```

```{r}
null_dist <-
  penguins |>
  dplyr::filter(species %in% c("Adelie", "Gentoo")) |>
  tidyr::drop_na(flipper_length_mm, species) |>
  specify(flipper_length_mm ~ species) |>
  hypothesize(null = "independence") |>
  generate(reps = 1000, type = "permute") |>
  calculate("t", order = c("Adelie", "Gentoo"))

null_dist
```

```{r}
null_dist |>
  visualize() +
  shade_p_value(obs_stat = observed_statistic, direction = "two-sided")
```

```{r}
null_dist |>
  get_p_value(obs_stat = observed_statistic, direction = "two-sided")
```

```{r}
adelie <-
  penguins |>
  filter(species == "Adelie") |>
  drop_na(flipper_length_mm) |>
  dplyr::pull(flipper_length_mm)

gentoo <-
  penguins |>
  dplyr::filter(species == "Gentoo") |>
  drop_na(flipper_length_mm) |>
  dplyr::pull(flipper_length_mm)
```

```{r}
test <- t.test(
  x = adelie,
  y = gentoo,
  alternative = "two.sided",
  mu = 0,
  paired = FALSE,
  var.equal = FALSE, # Welch's t-test,
  conf.level = 0.95
)

test
```

```{r}
effect_size <-
  cohens_d(
    x = adelie,
    y = gentoo,
    mu = 0,
    adjust = TRUE, # Hedge's g
    ci = 0.95,
    alternative = "two.sided"
  )

effect_size
```

```{r}
effect_size |> interpret_hedges_g(rules = "cohen1988")
```

```{r}
pwrss.t.2means(
  mu1 = adelie |> mean(na.rm = TRUE),
  mu2 = gentoo |> mean(na.rm = TRUE),
  sd1 = adelie |> sd(na.rm = TRUE),
  sd2 = gentoo |> sd(na.rm = TRUE),
  paired = FALSE,
  n2 = gentoo |> length(),
  kappa = (adelie |> length()) / (gentoo |> length()),
  power = NULL,
  alpha = 0.05,
  welch.df = TRUE,
  alternative = "not equal"
)
```

```{r}
library(effectsize)
library(stats)
```

```{r}
fit <- aov(flipper_length_mm ~ species, data = penguins)

fit
```

```{r}
fit |> summary()
```

```{r}
 fit |> TukeyHSD()
```

```{r}
effect_size <- fit |> eta_squared()

effect_size
```

```{r}
effect_size |> interpret_eta_squared(rules = "cohen1992")
```

```{r}
library(car)
library(effectsize)
library(multcomp)
library(stats)
```

```{r}
fit <- aov(flipper_length_mm ~ body_mass_g * species, data = penguins)

fit
```

```{r}
 fit |> Anova(type = "III")
```

```{r}
post_hoc <-
  fit |>
  glht(linfct = mcp(species = "Tukey"))

summary(post_hoc)
```

### Projeto SISVAN

```{r}
library(curl)
library(dplyr)
library(readxl)
library(stringr)
library(tidyr)
```

```{r}
file <- tempfile()

paste0(
    "https://sisaps.saude.gov.br/sisvan/public/file/relatorios/",
    "consumo/2oumais/entre2a4anos/CONS_ULTRA.xlsx"
  ) |>
  curl::curl_download(file)
```

```{r}
#| output: false

data <- NULL

for (i in 2015:2022) {
  data_i <-
      file |>
      readxl::read_xlsx(
        sheet = as.character(i),
        skip = 1,
        col_types = "text",
        col_names = FALSE
      ) |>
      dplyr::slice(-1)

  if (!i == 2022) data_i <- data_i |> dplyr::select(-1, -2)

  data_i <-
    data_i |>
    dplyr::rename_with(~ paste0("x", seq(length(.x)))) |>
    dplyr::mutate(year = i) |>
    dplyr::relocate(year)

  data <- dplyr::bind_rows(data, data_i)
}
```

```{r}
data <-
  data |>
  dplyr::rename(
    state_abbrev = x1,
    municipality_code = x2,
    municipality_name = x3,
    n_upf = x4,
    n_upf_rel = x5,
    n_monitored = x6
  ) |>
  dplyr::mutate(
    municipality_code = as.integer(municipality_code),
    municipality_name = stringr::str_to_title(municipality_name),
    n_upf = as.integer(n_upf),
    n_monitored = as.integer(n_monitored)
  )
```

```{r}
data <-
  data |>
  dplyr::filter(
    !n_upf > n_monitored,
    n_monitored >= 10,
    !state_abbrev == "DF"
  ) |>
  tidyr::drop_na(n_upf, n_monitored) |>
  dplyr::mutate(n_upf_rel = n_upf / n_monitored)
```

```{r}
data <-
  data |>
  dplyr::mutate(
    misfs = dplyr::case_when(
      state_abbrev %in% c(
        "AC", "GO", "MS", "MT", "RO", "TO"
      ) ~ "A",
      state_abbrev %in% c(
        "ES", "MG", "PR", "RJ", "RS", "SC", "SP"
      ) ~ "B",
      state_abbrev %in% c(
        "AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE"
      ) ~ "C",
      state_abbrev %in% c(
        "AM", "AP", "PA", "RR"
      ) ~ "D",
    ),
    misfs = factor(misfs, levels = c("A", "B", "C", "D"))
  ) |>
  dplyr::relocate(misfs, .before = state_abbrev)
```
